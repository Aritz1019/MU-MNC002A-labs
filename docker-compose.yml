version: '3.1'
services:
  authentication:
    build: MU-MNC002A-labs-auth/auth-app
    ports:
      - '13000:${UVICORN_PORT}'
    volumes:
      - './MU-MNC002A-labs-auth/auth-app/auth:/code'
      - './db_volume:/volume'
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${AUTH_SQLALCHEMY_SQLITE_DATABASE_URI}
      LOG_CONFIG_FILENAME: ${LOG_CONFIG_FILENAME}
    networks:
      lb7_network:
        ipv4_address: '${USER_REPLICA1_IP}'
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:80/auth/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      rabbitmq:
        condition: service_healthy

  payment:
    build: MU-MNC002A-labs-payment/payment-app
    ports:
      - '11000:${UVICORN_PORT}'
    volumes:
      - './MU-MNC002A-labs-payment/payment-app/payment:/code'
      - './db_volume:/volume'
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${PAYMENT_SQLALCHEMY_SQLITE_DATABASE_URI}
      LOG_CONFIG_FILENAME: ${LOG_CONFIG_FILENAME}
    networks:
      lb7_network:
        ipv4_address: '${PAYMENT_REPLICA1_IP}'
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy


  log:
    build: MU-MNC002A-labs-logs/log-app
    ports:
      - '18000:${UVICORN_PORT}'
    volumes:
      - './MU-MNC002A-labs-logs/log-app/log:/code'
      - './db_volume:/volume'
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${LOG_SQLALCHEMY_SQLITE_DATABASE_URI}
      LOG_CONFIG_FILENAME: ${LOG_CONFIG_FILENAME}
    networks:
      lb7_network:
        ipv4_address: '${LOG_REPLICA1_IP}'
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy

  machine:
    build: MU-MNC002A-labs-machine/machine-app
    ports:
      - '21000:${UVICORN_PORT}'
    volumes:
      - './MU-MNC002A-labs-machine/machine-app/machine:/code'
      - './db_volume:/volume'
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${MACHINE_SQLALCHEMY_SQLITE_DATABASE_URI}
      LOG_CONFIG_FILENAME: ${LOG_CONFIG_FILENAME}
    networks:
      lb7_network:
        ipv4_address: '${MACHINE_REPLICA1_IP}'
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy

  delivery:
    build: MU-MNC002A-labs-delivery/delivery_app
    ports:
      - '20000:${UVICORN_PORT}'
    volumes:
      - './MU-MNC002A-labs-delivery/delivery_app/delivery:/code'
      - './db_volume:/volume'
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${DELIVERY_SQLALCHEMY_SQLITE_DATABASE_URI}
      LOG_CONFIG_FILENAME: ${LOG_CONFIG_FILENAME}
    networks:
      lb7_network:
        ipv4_address: '${DELIVERY_REPLICA1_IP}'
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy

  order:
    build: MU-MNC002A-labs-order/order_app
    ports:
      - '${ORDER_REPLICA1_PORT}:${UVICORN_PORT}'
    volumes:
      - './MU-MNC002A-labs-order/order_app/ms_order:/code'
      - './db_volume:/volume'
    environment:
      PYTHONUNBUFFERED: 1
      SQLALCHEMY_DATABASE_URL: ${ORDER_SQLALCHEMY_SQLITE_DATABASE_URI}
      LOG_CONFIG_FILENAME: ${LOG_CONFIG_FILENAME}
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_IP: "${RABBITMQ_IP}"
      RABBITMQ_PORT: "${RABBITMQ_PORT}"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      lb7_network:
        ipv4_address: '${ORDER_REPLICA1_IP}'
    restart: unless-stopped


  haproxy:
    image: haproxy:2.6-alpine
    ports:
      - '${HAPROXY_PORT}:${HAPROXY_PORT}'
      - '${HAPROXY_STATS_PORT}:${HAPROXY_STATS_PORT}'
    expose:
      - '${HAPROXY_PORT}'
      - '${HAPROXY_STATS_PORT}'
    networks:
      lb7_network:
        ipv4_address: '${HAPROXY_IP}'
    environment:
      - 'USER_REPLICA1_IP=${USER_REPLICA1_IP}'
      - 'USER_REPLICA1_PORT=${UVICORN_PORT}'
      - 'PAYMENT_REPLICA1_IP=${PAYMENT_REPLICA1_IP}'
      - 'PAYMENT_REPLICA1_PORT=${UVICORN_PORT}'
      - 'LOG_REPLICA1_IP=${LOG_REPLICA1_IP}'
      - 'LOG_REPLICA1_PORT=${UVICORN_PORT}'
      - 'ORDER_REPLICA1_IP=${ORDER_REPLICA1_IP}'
      - 'ORDER_REPLICA1_PORT=${UVICORN_PORT}'
      - 'DELIVERY_REPLICA1_IP=${DELIVERY_REPLICA1_IP}'
      - 'DELIVERY_REPLICA1_PORT=${UVICORN_PORT}'
      - 'MACHINE_REPLICA1_IP=${MACHINE_REPLICA1_IP}'
      - 'MACHINE_REPLICA1_PORT=${UVICORN_PORT}'
      - 'HAPROXY_PORT=${HAPROXY_PORT}'
      - 'HAPROXY_STATS_PORT=${HAPROXY_STATS_PORT}'
      - 'CONSUL_IP=${CONSUL_IP}'
    restart: unless-stopped
    volumes:
      - './haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg'
      - './certs/haproxy/haproxy.pem:/usr/local/etc/haproxy/haproxy.pem'

  rabbitmq:
    build:
      context: .
      dockerfile: ./rabbitMQDockerfile
    ports:
      - "15671:15671"
      - "5671:5671"
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
      RABBITMQ_DEFAULT_VHOST: "/"
      RABBITMQ_SSL_VERIFY: verify_none
      RABBITMQ_SSL_CACERTFILE: /etc/ssl/certs/cert.pem
      RABBITMQ_SSL_CERTFILE: /etc/ssl/certs/rabbitmq_cert.pem
      RABBITMQ_SSL_KEYFILE: /etc/ssl/certs/rabbitmq_key.pem
      RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT: false
    networks:
      lb7_network:
        ipv4_address: '${RABBITMQ_IP}'
    volumes:
      - './certs/rabbitmq/rabbitmq_cert.pem:/etc/ssl/certs/rabbitmq_cert.pem'
      - './certs/rabbitmq/rabbitmq_key.pem:/etc/ssl/certs/rabbitmq_key.pem'
      - './certs/rabbitmq/cert.pem:/etc/ssl/certs/cert.pem'
    healthcheck:
      test: [ "CMD", "curl", "--insecure", "https://localhost:15671/" ]
      interval: 5s
      timeout: 5s
      retries: 10

  consul:
    container_name: consul
    image: 'consul:1.15'
    ports:
      - '8300:8300'
      - '8301:8301'
      - '8301:8301/udp'
      - '8500:8500'
      - '8600:8600'
      - '8600:8600/udp'
    networks:
      lb7_network:
        ipv4_address: '${CONSUL_IP}'

networks:
  lb7_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: '${NETWORK_SUBNET}'